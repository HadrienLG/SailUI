esphome:
  name: sailuifeather
  platform: ESP32
  board: featheresp32

wifi:
  ssid: "SailUI"
  password: "openplotter"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sailuifeather Fallback Hotspot"
    password: "gRv85G1FSoxt"

captive_portal:

# Enable logging
logger:

ota:

mqtt:
  id : mqtt_client
  broker: 10.3.141.1
  port: 1883

  
web_server:
  port: 80


time:
  - platform: sntp
    id: esptime

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: 15
    dc_pin: 33
    rotation: 90
    #led_pin: 32  ### see note below ###
    reset_pin: 4

    lambda: |-
      // DISPLAY - supposed to be 320x240 px
      it.fill(COLOR_BLACK);

      // HEADER - Draw a filled rectangle as a header.
      it.strftime(0, 10, id(helvetica_8), id(my_red), TextAlign::BASELINE_LEFT, "%Y-%m-%d %H:%M:%S", id(esptime).now());
      it.filled_rectangle(0, 19, 240, 2);

      // MAIN VALUES
      it.filled_rectangle(119, 0, 2, 120);

      it.printf(2, 22, id(helvetica_8), id(my_green), TextAlign::LEFT, "Speed");  
      it.printf(5, 38, id(helvetica_30), id(my_green), TextAlign::LEFT, "%s", id(textVit).state.c_str());  
      it.printf(107, 72, id(helvetica_8), id(my_green), TextAlign::LEFT, "kt");  

      it.printf(122, 22, id(helvetica_8), id(my_blue), TextAlign::LEFT, "Heading");
      it.printf(125, 38, id(helvetica_30), id(my_blue), TextAlign::LEFT, "%s", id(textCap).state.c_str());
      it.printf(218, 72, id(helvetica_8), id(my_blue), TextAlign::LEFT, "deg");
      it.filled_rectangle(0, 84, 240, 2);

      // FOOTER
      it.printf(2, 87, id(helvetica_8), id(my_green), TextAlign::LEFT, "VMG");  
      it.printf(35, 95, id(helvetica_20), id(my_green), TextAlign::LEFT, "%s", id(textVMG).state.c_str());  
      it.printf(107, 108, id(helvetica_8), id(my_green), TextAlign::LEFT, "kt");  

      it.printf(122, 87, id(helvetica_8), id(my_blue), TextAlign::LEFT, "TWA");
      it.printf(147, 95, id(helvetica_20), id(my_blue), TextAlign::LEFT, "%s", id(textTWA).state.c_str());
      it.printf(218, 108, id(helvetica_8), id(my_blue), TextAlign::LEFT, "deg");


text_sensor:
  - platform: mqtt_subscribe
    name: "Vitesse"
    id: textVit
    topic: gps/info/vitesse
  - platform: mqtt_subscribe
    name: "Cap"
    id: textCap
    topic: gps/info/cap
  - platform: mqtt_subscribe
    name: "VMG"
    id: textVMG
    topic: gps/info/vmg
  - platform: mqtt_subscribe
    name: "TWA"
    id: textTWA
    topic: gps/info/twa

spi: 
  clk_pin: 5
  mosi_pin: 18
  miso_pin: 19


font:
  - file: "Helvetica.ttf"
    id: helvetica_8
    size: 8
  - file: "Helvetica.ttf"
    id: helvetica_12
    size: 12
  - file: "Helvetica.ttf"
    id: helvetica_20
    size: 20
  - file: "Helvetica.ttf"
    id: helvetica_24
    size: 24
  - file: "Helvetica.ttf"
    id: helvetica_30
    size: 30
    

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%
  - id: my_blue
    red: 3%
    green: 5%
    blue: 100%
  - id: my_green
    red: 5%
    green: 100%
    blue: 3%
  - id: darkgrey
    red: 42%
    green: 42%
    blue: 42%
  - id: lightgrey
    red: 60%
    green: 60%
    blue: 60%



# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 32
    id: gpio_32_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

    